<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://cove.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cove.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Constellation DAGs</title>
      <link>https://cove.github.io/constellation-dags/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cove.github.io/constellation-dags/</guid>
      <description>A constellation DAG can be thought of as way to share the thought process that everyone
already reasons through before making roadmaps or plans in general.
The key difference between a constellation DAG and simply structuring tasks onto a graph
is that the vertices don&amp;rsquo;t need to represent one type of concept, but can be a milestone, a
vague general goal, an asperation, or simply a task. This fluid mixing of concepts better</description>
    </item>
    
    <item>
      <title>Software Release Facts</title>
      <link>https://cove.github.io/software-release-facts/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cove.github.io/software-release-facts/</guid>
      <description>In order to improve the quality of software, the Software Release Facts label exposes quality metrics to end consumers, so they can make informed decisions, and aligns software vendors&amp;rsquo; incentives with making quality software.</description>
    </item>
    
    <item>
      <title>Problem Classifications</title>
      <link>https://cove.github.io/problem-classifications/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cove.github.io/problem-classifications/</guid>
      <description>All problems can be reduced to one of two classes that can be asked as questions:
 What factors need to come together to create a desired outcome?
 What factors came together to create an outcome?
  Where 1 can be thought as the forward view, and 2 the backwards disambiguation (and 2 is probably less NP hard).
It follows then that 1 is not fully solved if 2 can&amp;rsquo;t be solved, since the solution to 1 will become the</description>
    </item>
    
  </channel>
</rss>